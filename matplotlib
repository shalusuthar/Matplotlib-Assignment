{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "653f4b2d-ee98-4a29-8e0e-01370373eb92",
   "metadata": {},
   "source": [
    "Q1: What is Matplotlib? Why is it used? Name five plots that can be plotted using the Pyplot module of\n",
    "Matplotlib."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f4e6223-200c-4921-a181-c9a5f25439d9",
   "metadata": {},
   "source": [
    "ans. Matplotlib is a widely used plotting library in Python that provides a variety of plotting tools and capabilities. Here are some of the advantages of using Matplotlib: Versatility: Matplotlib can create a wide range of plots, including line plots, scatter plots, bar plots, histograms, pie charts, and more."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34dce7c2-6eca-4da7-934a-cc81719d9933",
   "metadata": {},
   "source": [
    "Q2: What is a scatter plot? Use the following code to generate data for x and y. Using this generated data\n",
    "plot a scatter plot."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8f4fdf3-325a-4553-8bc4-17c5e3baef62",
   "metadata": {},
   "source": [
    "Ans. Scatter plots are the graphs that present the relationship between two variables in a data-set. It represents data points on a two-dimensional plane or on a Cartesian system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c555a99e-0f6b-41e4-bf45-dd0c0715d242",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "np.random.seed(3)\n",
    "x = 3 + np.random.normal(0, 2, 50)\n",
    "y = 3 + np.random.normal(0, 2, len(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2b777ad9-3d7d-4057-ad47-b45640f807de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjUAAAHFCAYAAAAKbwgcAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8o6BhiAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAx+ElEQVR4nO3de3TU9Z3/8dckQIKYBBMMCYRLDFrIRhvCTRRdqEoRZLFVKlTwcoAtLCiCq0KpG+J6SKu2oLREwfWKCq7WI6ik2FJQBBYlWER+VbkoWUjkphO8hGhmfn9kJyXkNjOZme/3+/k+H+fkHDP5zuSdhPh95fN5fz4fj9/v9wsAAMDh4qwuAAAAIBIINQAAwAiEGgAAYARCDQAAMAKhBgAAGIFQAwAAjECoAQAARiDUAAAAIxBqAACAEQg1AFq0ZcsWLVy4UF9++WWjj/Xu3VvXXHNNq6+xceNGeTwebdy4sc31LFy4UB6Pp82vI0nLli3TU0891ejxTz/9VB6Pp8HHWvo+DB8+XMOHD49ITQDCR6gB0KItW7aoqKioyZt5sAoKCrR161YVFBS0uZ6pU6dq69atbX4dqflQk5mZqa1bt2rMmDH1j0Xi+wAgutpZXQAA8yUnJ+viiy+OyGtlZWUpKysrIq/VnISEhIjVCyB2GKkB0KyFCxfqrrvukiRlZ2fL4/E0OY1UWlqqgoICdezYUX379tUTTzzR4ONNTT/t379fEyZMULdu3ZSQkKCuXbvqiiuu0Pvvv99qTWdOP23YsEHDhw9XWlqaOnbsqJ49e+q6667TN9980+zr9O7dWx9++KE2bdpU/3X17t1bUuPpp2C/D6erqanR/fffr759+yohIUHnnnuubr31Vh09erTFrw9A+BipAdCsqVOn6sSJE1q6dKn++Mc/KjMzU5KUm5tbf83f/vY33XnnnZo3b566du2qxx9/XFOmTFGfPn10+eWXN/vao0ePVm1trR544AH17NlTx44d05YtW0Ke3vn00081ZswYXXbZZXriiSfUuXNnHTp0SKWlpaqpqdFZZ53V5PNeeeUVXX/99UpJSdGyZcsk1Y3QhPt9OJ3P59O4ceP09ttv6+6779Yll1yizz77TIWFhRo+fLjee+89dezYMaSvE0DrCDUAmpWVlaWePXtKkvr3718/knG6Y8eO6Z133qm/7vLLL9df/vIXPf/8882GmuPHj+ujjz7SkiVLNGnSpPrHf/rTn4Zc444dO1RdXa0HH3xQP/zhD+sf//nPf97i8/r376+OHTsGNTUWzPfhdC+++KJKS0v18ssvN/iafvjDH2rQoEF66qmnNGPGjFa+MgChYvoJQJvk5+fX3/AlKTExURdccIE+++yzZp+TmpqqnJwcPfjgg/rd736nnTt3yufzhf35O3TooH/913/V008/rf3794f1OpH02muvqXPnzho7dqy+//77+rf8/HxlZGREZBUYgMYINQDaJC0trdFjCQkJ+vbbb5t9jsfj0V/+8hf9+Mc/1gMPPKCCggKde+65uv3223Xy5MmQPn9OTo7+/Oc/Kz09XTNnzlROTo5ycnL08MMPh/y1RMrnn3+uL7/8Uh06dFD79u0bvFVWVurYsWOW1QaYjOknAJbo1auX/uu//kuS9PHHH+vFF1/UwoULVVNTo0cffTSk17rssst02WWXqba2Vu+9956WLl2qO+64Q127dtWECROiUX6LunTporS0NJWWljb58aSkpBhXBLgDoQZAiwLNsy2NvLTVBRdcoF/96ld6+eWXVVZWFvbrxMfHa8iQIerbt6+ee+45lZWVtRhqWhtROvNaKbjvwzXXXKNVq1aptrZWQ4YMCa54AG1GqAHQogsvvFCS9PDDD+vmm29W+/bt9YMf/KBNow27du3SrFmzNH78eJ1//vnq0KGDNmzYoF27dmnevHkhvdajjz6qDRs2aMyYMerZs6eqq6vrl5RfeeWVLT73wgsv1KpVq7R69Wqdd955SkxMrP96m7pWCu77MGHCBD333HMaPXq0Zs+ercGDB6t9+/b63//9X/31r3/VuHHj9JOf/CSkrxNA6wg1AFo0fPhwzZ8/X08//bRWrFghn8+nv/71r206FiAjI0M5OTlatmyZysvL5fF4dN555+m3v/2tbrvttpBeKz8/X+vXr1dhYaEqKyt19tlnKy8vT2vWrNHIkSNbfG5RUZEqKio0bdo0nTx5Ur169dKnn37a5LWhfB/i4+O1Zs0aPfzww3r22WdVXFysdu3aKSsrS//8z//cbHAC0DYev9/vt7oIAACAtmL1EwAAMAKhBgAAGIFQAwAAjECoAQAARiDUAAAAIxBqAACAEVy1T43P59Phw4eVlJQkj8djdTkAACAIfr9fJ0+eVLdu3RQX1/x4jKtCzeHD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/VRaWqqzzz5bw4YNkyT94Q9/0IoVK5Sbm6s//OEPOueccyJeJOBmo/IydVVuhmW9LKGswmKHYCB4TOlGXsgjNXfddZeqqqokSR988IHuvPNOjR49Wvv379fcuXMjXiCAfxwpMC6/u4bmpMW0OZdVWEDkMaUbHSGP1Bw4cEC5uXXz/C+//LKuueYaLVq0SGVlZRo9enTECwRgLTuuwoJ53LSyrrUpXY/qpnSvys0w9nsQLSGHmg4dOuibb76RJP35z3/WTTfdJElKTU2tH8EBYA67rcKCedw2DcOUbvSEPP00bNgwzZ07V//5n/+p7du3a8yYMZKkjz/+WFlZWREvEIC17LQKC+Zx4zQMU7rRE3Ko+f3vf6927drppZdeUklJibp37y5JWrdunUaNGhXxAgFYzw6rsGAet66sY0o3ejx+v9+sfy0tqKqqUkpKirxer5KTk60uB3AcN/U9IPq27juuiSu2tXrdC9MuNmoaptbn17DfbGh1SnfzPT/i9+v/BHv/Dqqnpqqqqv5FWuubISwA5gqswgIiwa3TMIEp3Rkry+SRGgQbpnTbJqhQc84556iiokLp6enq3LmzPJ7G32i/3y+Px6Pa2tqIFwkAMI+bp2ECU7pnNkhnGNwgHQtBhZoNGzYoNTW1/r+bCjVoG4b1AbiN21fWWb2xponoqbEBty1nBICAwOonqelpGBrRIQV//w559dO9997b5BST1+vVxIkTQ30513PjckYACGBlHSIp5JGaXr16KTMzU88995xycnIkSRs3btRNN92k7t27a+vWrVEpNBLsNlIT6IBvbhMmOuABuAVT8GhJ1EZqdu3apd69eys/P18rVqzQXXfdpZEjR+qWW27R5s2b21S024SyqyQAmMzK881gjpCPSUhJSdGqVau0YMEC/eIXv1C7du20bt06XXHFFdGoz2huXc4IAEA0hDxSI0lLly7V4sWLNXHiRJ133nm6/fbb9be//S3StRnPzcsZAQCItJBDzdVXX62ioiI988wzeu6557Rz505dfvnluvjii/XAAw9Eo0ZjBZYzNjfI6lHdKihTlzMCABBJIYea77//Xrt27dL1118vSerYsaNKSkr00ksvafHixREv0GQcFAgAQOREdJ+aY8eOqUuXLpF6uYiz2+qnAPapAQCgeRE9+ylYdg40dsaukgAAtF3Ioaa2tlaLFy/W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jh0trs69kpKSGvU1derUSWlpafQ7WWzOnDm65JJLtGjRIv3sZz/T9u3btXz5cmYBwkSoCcH69eu1d+9e7d27t9GQOivjY+uGG27Q8ePHdd9996miokJ5eXl64403+OvGYoE+gOHDhzd4/Mknn9Qtt9wS+4IAmxs0aJBeeeUVzZ8/X/fdd5+ys7O1ZMkS3XjjjVaX5kjsUwMAAIxAQwgAADACoQYAABiBUAMAAIxAqAEAAEYg1AAAACMQagAAgBEINQAAwAiEGgCus3HjRnk8Hn355ZdWlwIggth8D4Dr1NTU6MSJE+ratSsnuwMGIdQAAAAjMP0EwDJHjx5VRkaGFi1aVP/Y//zP/6hDhw5av359s8+75557dMEFF+iss87Seeedp3vvvVffffedpLpz2K688kqNGjWq/ky2L7/8Uj179tSCBQskNZ5++uyzzzR27Fidc8456tSpk/7pn/5Jb7zxRpS+agDRwoGWACxz7rnn6oknntC1116rkSNHqm/fvpo0aZL+7d/+TSNHjmz2eUlJSXrqqafUrVs3ffDBB5o2bZqSkpJ09913y+Px6Omnn9aFF16oRx55RLNnz9b06dPVtWtXLVy4sMnXmzlzpmpqavTWW2+pU6dO2rNnj84+++wofdUAooVQA8BSo0eP1rRp03TjjTdq0KBBSkxM1K9//esWn/OrX/2q/r979+6tO++8U6tXr9bdd98tSerevbsee+wxTZ48WZ9//rnWrl2rnTt3qn379k2+3sGDB3XdddfpwgsvlCSdd955EfrqAMQSPTUALPftt98qLy9P5eXleu+993TRRRe1eP1LL72kJUuWaO/evfrqq6/0/fffKzk5WUeOHGlw3c9//nO98MILKikp0fTp0+sf37hxo0aMGKEvvvhCnTt31uOPP64ZM2Zo8ODBuvLKK3Xddde1WgMA+6GnBoDl9u/fr8OHD8vn8+mzzz5r8dpt27ZpwoQJuvrqq/Xaa69p586dWrBggWpqahpc980332jHjh2Kj4/XJ5980uJrTp06Vfv379fkyZP1wQcfaODAgVq6dGmbvy4AsUWoAWCpmpoa3Xjjjbrhhht0//33a8qUKfr888+bvf6dd95Rr169tGDBAg0cOFDnn39+k0HozjvvVFxcnNatW6dHHnlEGzZsaLGOHj16aPr06frjH/+oO++8UytWrGjz1wYgtuipAWCpBQsWyOv16pFHHtHZZ5+tdevWacqUKXrttdeavL5Pnz46ePCgVq1apUGDBun111/XK6+80uCa119/XU888YS2bt2qgoICzZs3TzfffLN27dqlc845p9Fr3nHHHbr66qt1wQUX6IsvvtCGDRvUr1+/qHy9AKKHkRoAltm4caOWLFmiZ599VsnJyYqLi9Ozzz6rzZs3q6SkpMnnjBs3TnPmzNGsWbOUn5+vLVu26N57763/+NGjRzVlyhQtXLhQBQUFkqTCwkJ169atQV/N6WprazVz5kz169dPo0aN0g9+8AMtW7Ys8l8wgKiiURgAABiBkRoAAGAEQg0AADACoQYAABiBUAMAAIxAqAEAAEYg1AAAACMQagAAgBEINQAAwAiEGgAAYARCDQAAMAKhBgAAGIFQAwAAjPD/AZSARdZ80LGCAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.xlabel('x axis')\n",
    "plt.ylabel('y axis')\n",
    "plt.title('this is title')\n",
    "plt.scatter(x,y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf9eda65-403d-4352-9b7c-15804b482926",
   "metadata": {},
   "source": [
    "Q3: Why is the subplot() function used? Draw four line plots using the subplot() function.\n",
    "Use the following data:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45572229-61e5-44b3-82dc-ba3b01325879",
   "metadata": {},
   "source": [
    "Ans. subplots method provides a way to plot multiple plots on a single figure. Given the number of rows and columns , it returns a tuple ( fig , ax ), giving a single figure fig with an array of axes ax ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d051f2e8-4ce4-459a-a3af-c0a3283e66b1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ece8d6bc-03ea-449e-8d79-722218cdda52",
   "metadata": {},
   "source": [
    "Q4: What is a bar plot? Why is it used? Using the following data plot a bar plot and a horizontal bar plot."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57a0ce3f-3fb0-49ad-a496-3b9e2e51a9e7",
   "metadata": {},
   "source": [
    "A barplot (or barchart) is one of the most common types of graphic. It shows the relationship between a numeric and a categoric variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3998402f-0473-4ebf-8d29-51f3aec1550c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "company = np.array([\"Apple\", \"Microsoft\", \"Google\", \"AMD\"])\n",
    "profit = np.array([3000, 8000, 1000, 10000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "97d3fb71-11a7-4254-80bb-efb89f70e2a3",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'matplotlib.pyplot' has no attribute 'companylabel'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[25], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39mbar(company,profit)\n\u001b[0;32m----> 2\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcompanylabel\u001b[49m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mx axis\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      3\u001b[0m plt\u001b[38;5;241m.\u001b[39mprofitlabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124my axis\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      4\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbar graph\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'matplotlib.pyplot' has no attribute 'companylabel'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(company,profit)\n",
    "plt.companylabel('x axis')\n",
    "plt.profitlabel('y axis')\n",
    "plt.title('bar graph')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b9ad3c22-6619-4f59-9fbe-c09c35dd90f2",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'matplotlib.pyplot' has no attribute 'companylabel'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[26], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39mbarh(company,profit)\n\u001b[0;32m----> 2\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcompanylabel\u001b[49m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mx axis\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      3\u001b[0m plt\u001b[38;5;241m.\u001b[39mprofitlabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124my axis\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      4\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbar graph\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'matplotlib.pyplot' has no attribute 'companylabel'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.barh(company,profit)\n",
    "plt.companylabel('x axis')\n",
    "plt.profitlabel('y axis')\n",
    "plt.title('bar graph')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3af888d-4e1c-41b6-993d-fe34ad92379f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "b5b6a0a3-598c-4dc4-9606-3c8ac1d6b47a",
   "metadata": {},
   "source": [
    "Q5: What is a box plot? Why is it used? Using the following data plot a box plot."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bf94164-867e-4cf9-93ac-1eb9b782229f",
   "metadata": {},
   "source": [
    "Ans.Box plots are used to show distributions of numeric data values, especially when you want to compare them between multiple groups. They are built to provide high-level information at a glance, offering general information about a group of data's symmetry, skew, variance, and outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "38019581-aef0-4fe6-879c-a37adc32b6b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a85dd91f-a55b-4848-89c5-45f353fa9b48",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d43e3eed-f5fb-4821-bb80-cb020efac32e",
   "metadata": {},
   "outputs": [],
   "source": [
    "box1 = np.random.normal(100, 10, 200)\n",
    "box2 = np.random.normal(90, 20, 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "bea5d997-02cd-4de8-bc62-bdc4a0e3e972",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([100.        ,  99.54773869,  99.09547739,  98.64321608,\n",
       "        98.19095477,  97.73869347,  97.28643216,  96.83417085,\n",
       "        96.38190955,  95.92964824,  95.47738693,  95.02512563,\n",
       "        94.57286432,  94.12060302,  93.66834171,  93.2160804 ,\n",
       "        92.7638191 ,  92.31155779,  91.85929648,  91.40703518,\n",
       "        90.95477387,  90.50251256,  90.05025126,  89.59798995,\n",
       "        89.14572864,  88.69346734,  88.24120603,  87.78894472,\n",
       "        87.33668342,  86.88442211,  86.4321608 ,  85.9798995 ,\n",
       "        85.52763819,  85.07537688,  84.62311558,  84.17085427,\n",
       "        83.71859296,  83.26633166,  82.81407035,  82.36180905,\n",
       "        81.90954774,  81.45728643,  81.00502513,  80.55276382,\n",
       "        80.10050251,  79.64824121,  79.1959799 ,  78.74371859,\n",
       "        78.29145729,  77.83919598,  77.38693467,  76.93467337,\n",
       "        76.48241206,  76.03015075,  75.57788945,  75.12562814,\n",
       "        74.67336683,  74.22110553,  73.76884422,  73.31658291,\n",
       "        72.86432161,  72.4120603 ,  71.95979899,  71.50753769,\n",
       "        71.05527638,  70.60301508,  70.15075377,  69.69849246,\n",
       "        69.24623116,  68.79396985,  68.34170854,  67.88944724,\n",
       "        67.43718593,  66.98492462,  66.53266332,  66.08040201,\n",
       "        65.6281407 ,  65.1758794 ,  64.72361809,  64.27135678,\n",
       "        63.81909548,  63.36683417,  62.91457286,  62.46231156,\n",
       "        62.01005025,  61.55778894,  61.10552764,  60.65326633,\n",
       "        60.20100503,  59.74874372,  59.29648241,  58.84422111,\n",
       "        58.3919598 ,  57.93969849,  57.48743719,  57.03517588,\n",
       "        56.58291457,  56.13065327,  55.67839196,  55.22613065,\n",
       "        54.77386935,  54.32160804,  53.86934673,  53.41708543,\n",
       "        52.96482412,  52.51256281,  52.06030151,  51.6080402 ,\n",
       "        51.15577889,  50.70351759,  50.25125628,  49.79899497,\n",
       "        49.34673367,  48.89447236,  48.44221106,  47.98994975,\n",
       "        47.53768844,  47.08542714,  46.63316583,  46.18090452,\n",
       "        45.72864322,  45.27638191,  44.8241206 ,  44.3718593 ,\n",
       "        43.91959799,  43.46733668,  43.01507538,  42.56281407,\n",
       "        42.11055276,  41.65829146,  41.20603015,  40.75376884,\n",
       "        40.30150754,  39.84924623,  39.39698492,  38.94472362,\n",
       "        38.49246231,  38.04020101,  37.5879397 ,  37.13567839,\n",
       "        36.68341709,  36.23115578,  35.77889447,  35.32663317,\n",
       "        34.87437186,  34.42211055,  33.96984925,  33.51758794,\n",
       "        33.06532663,  32.61306533,  32.16080402,  31.70854271,\n",
       "        31.25628141,  30.8040201 ,  30.35175879,  29.89949749,\n",
       "        29.44723618,  28.99497487,  28.54271357,  28.09045226,\n",
       "        27.63819095,  27.18592965,  26.73366834,  26.28140704,\n",
       "        25.82914573,  25.37688442,  24.92462312,  24.47236181,\n",
       "        24.0201005 ,  23.5678392 ,  23.11557789,  22.66331658,\n",
       "        22.21105528,  21.75879397,  21.30653266,  20.85427136,\n",
       "        20.40201005,  19.94974874,  19.49748744,  19.04522613,\n",
       "        18.59296482,  18.14070352,  17.68844221,  17.2361809 ,\n",
       "        16.7839196 ,  16.33165829,  15.87939698,  15.42713568,\n",
       "        14.97487437,  14.52261307,  14.07035176,  13.61809045,\n",
       "        13.16582915,  12.71356784,  12.26130653,  11.80904523,\n",
       "        11.35678392,  10.90452261,  10.45226131,  10.        ])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "box1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c5de12e0-51b3-4aee-a348-e432925c9006",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([90.        , 89.64824121, 89.29648241, 88.94472362, 88.59296482,\n",
       "       88.24120603, 87.88944724, 87.53768844, 87.18592965, 86.83417085,\n",
       "       86.48241206, 86.13065327, 85.77889447, 85.42713568, 85.07537688,\n",
       "       84.72361809, 84.3718593 , 84.0201005 , 83.66834171, 83.31658291,\n",
       "       82.96482412, 82.61306533, 82.26130653, 81.90954774, 81.55778894,\n",
       "       81.20603015, 80.85427136, 80.50251256, 80.15075377, 79.79899497,\n",
       "       79.44723618, 79.09547739, 78.74371859, 78.3919598 , 78.04020101,\n",
       "       77.68844221, 77.33668342, 76.98492462, 76.63316583, 76.28140704,\n",
       "       75.92964824, 75.57788945, 75.22613065, 74.87437186, 74.52261307,\n",
       "       74.17085427, 73.81909548, 73.46733668, 73.11557789, 72.7638191 ,\n",
       "       72.4120603 , 72.06030151, 71.70854271, 71.35678392, 71.00502513,\n",
       "       70.65326633, 70.30150754, 69.94974874, 69.59798995, 69.24623116,\n",
       "       68.89447236, 68.54271357, 68.19095477, 67.83919598, 67.48743719,\n",
       "       67.13567839, 66.7839196 , 66.4321608 , 66.08040201, 65.72864322,\n",
       "       65.37688442, 65.02512563, 64.67336683, 64.32160804, 63.96984925,\n",
       "       63.61809045, 63.26633166, 62.91457286, 62.56281407, 62.21105528,\n",
       "       61.85929648, 61.50753769, 61.15577889, 60.8040201 , 60.45226131,\n",
       "       60.10050251, 59.74874372, 59.39698492, 59.04522613, 58.69346734,\n",
       "       58.34170854, 57.98994975, 57.63819095, 57.28643216, 56.93467337,\n",
       "       56.58291457, 56.23115578, 55.87939698, 55.52763819, 55.1758794 ,\n",
       "       54.8241206 , 54.47236181, 54.12060302, 53.76884422, 53.41708543,\n",
       "       53.06532663, 52.71356784, 52.36180905, 52.01005025, 51.65829146,\n",
       "       51.30653266, 50.95477387, 50.60301508, 50.25125628, 49.89949749,\n",
       "       49.54773869, 49.1959799 , 48.84422111, 48.49246231, 48.14070352,\n",
       "       47.78894472, 47.43718593, 47.08542714, 46.73366834, 46.38190955,\n",
       "       46.03015075, 45.67839196, 45.32663317, 44.97487437, 44.62311558,\n",
       "       44.27135678, 43.91959799, 43.5678392 , 43.2160804 , 42.86432161,\n",
       "       42.51256281, 42.16080402, 41.80904523, 41.45728643, 41.10552764,\n",
       "       40.75376884, 40.40201005, 40.05025126, 39.69849246, 39.34673367,\n",
       "       38.99497487, 38.64321608, 38.29145729, 37.93969849, 37.5879397 ,\n",
       "       37.2361809 , 36.88442211, 36.53266332, 36.18090452, 35.82914573,\n",
       "       35.47738693, 35.12562814, 34.77386935, 34.42211055, 34.07035176,\n",
       "       33.71859296, 33.36683417, 33.01507538, 32.66331658, 32.31155779,\n",
       "       31.95979899, 31.6080402 , 31.25628141, 30.90452261, 30.55276382,\n",
       "       30.20100503, 29.84924623, 29.49748744, 29.14572864, 28.79396985,\n",
       "       28.44221106, 28.09045226, 27.73869347, 27.38693467, 27.03517588,\n",
       "       26.68341709, 26.33165829, 25.9798995 , 25.6281407 , 25.27638191,\n",
       "       24.92462312, 24.57286432, 24.22110553, 23.86934673, 23.51758794,\n",
       "       23.16582915, 22.81407035, 22.46231156, 22.11055276, 21.75879397,\n",
       "       21.40703518, 21.05527638, 20.70351759, 20.35175879, 20.        ])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "box2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8146fd6-0f2d-4150-8da8-6a9169d85a24",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28be9fe6-f01f-46ca-9f19-1649df73c6c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
